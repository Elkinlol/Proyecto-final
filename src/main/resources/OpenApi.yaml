openapi: 3.0.3
info:
  title: API de proyecto web para reserva de alojamientos
  description: |-
    Api rest para gestion de alojamientos, usuarios y reservas.
    
    El proyecto es desarrola por la parte de Bakend en spring boot y uso angular para el fronted,
      además del uso de Maria DB como base de datos relacional.
    
    Enlaces de utilidad:
      -[Enlace de GitHub](https://github.com/Elkinlol/Proyecto-final)
      
    Contacto: elkin.bermudezg@uqvirtual.edu.co
  version: 1.1

    

servers:
  - url: http/:localhost:8082/api
    description: servidor local

tags:
  - name: Auth
  - description: Autenticacion del usuario
  - name: Users
    description: Interactuan con alojamientos, reservas, comentarios, se relacionan con operaciones de registro, creacion, edicion, etc.
  - name: Listings
    description: Gestion de viviendas
  - name: Reservations
    description: crud de reservas
  - name: Comments
    description: Manejo de los comentarios de una reserva

paths:
  /Auth:
    post:
      tags: [Auth]
      summary: Creacion de un nuevo usuario
      operationId: registrarUsuario
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: Usuario registrado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Datos no validos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Correo ya registrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '500':
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /Auth/login:
    post:
      tags: [Auth]
      summary: Inicio de sesion -- JWT
      operationId: iniciarSesion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginRequest'
            example:
              email: "usuario@ejemplo.com"
              password: "ContraseñaSegura123"
      responses:
        '200':
            description: Se ha iniciado sesión con exito
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/LoginResponse'
        '400':
            description: Faltan datos requridos (rellenar todos los campos)
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
        '401':
            description: credenciales invalidas (email o contraseña incorrecta)
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
        '404':
            description: Usuario no encontrado
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
        '500':
            description: error del servidor
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'


  /users/{id}/password:
    patch:
      tags: [Users]
      summary: Actualizar contraseña de un usuario
      operationId: ActualizarContrasenia
      security:
        - BearerAuth: [ ]
      parameters:
          - name: id
            in: path
            required: true
            schema:
              type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updatePassword'
            example:
              currentPassword: "ContraseñaVieja123"
              newPassword: "NuevaContraseñaSegura456"
      responses:
        '200':
          description: contraseña actualizada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                response: 'la contraseña ha sido actualizada'
        '400':
          description: Faltan datos requeridos o contraseña debil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: 'la contraseña debe tener minimo 8 caracteres, incluyendo numeros, letras y caracteres especiales'
        '401':
          description: No autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: 'la contraseña actual no coincide'
        '403':
          description: Prohibido -- Sin permisos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: 'No tiene permiso para la actualizacion de la contraseña'
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: 'No se encuentra el usuario'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: 'error inesperado, intentar más tarde'
        '503':
          description: Sin disponibilidad de servicio
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Error inesperado, intente más tarde"
  /users/{id}:
    put:
      tags : [Users]
      summary: actualizar perfil(nombre, id, telefono)
      operationId: UpdateProfile
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
          type: String
          description: Id del usuario
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
            example:
              nombre: "Carlos Ramírez"
              telefono: "+57 3001234567"
              fotoPerfil: "https://miservidor.com/perfiles/carlos.jpg"
              descripcion: "Anfitrión con experiencia en Medellín"
      responses:
        '200':
          description: Perfil actualizado con exito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateProfileResponse'
        "400":
          description: Datos inválidos (formato incorrecto o campos vacíos)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "Número de teléfono inválido"
        "401":
          description: Usuario no autenticado o token inválido
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "No autorizado, inicie sesión"
        "403":
          description: Intento de editar el perfil de otro usuario
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "No tiene permisos para editar este perfil"
        "500":
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                error: "Error inesperado, intente más tarde"
    get:
      tags: [ Users ]
      description: Ver el perfil de un usuario
      operationId: ViewProfile
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
          type: Integer
          description: Id del usuario
      responses:
        '200':
          description: Ver perfil concretado
          content:
            schema:
              $ref: "#/components/schemas/viewUsers"
        '401':
          description: Usuario NO autorizado
          content:
            schema:
              $ref: "#/components/schemas/ErrorResponse"
        '403':
          description: No tiene  los privilegios necesarios
          content:
            schema:
              $ref: "#/components/schemas/ErrorResponse"
        '404':
          description: Usuario no encontrado
          content:
            schema:
              $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Error del sevidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"


  /auth/password:
    post:
      tags: [Auth]
      summary: Solicitar código de recuperación de contraseña
      description: Envía un código de recuperación al correo electrónico del usuario. El código expira en 15 minutos.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecoveryResponse"
      responses:
        "200":
          description: Código de recuperación enviado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Se ha enviado un código de recuperación a su correo electrónico."
        "404":
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        "500":
          description: Error del sevidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"


  /auth/change/password:
    put:
      tags: [Auth]
      summary: Se cambia la contraseña
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequest"
      responses:
        '200':
          description: contraseña cambiada de manera exitosa
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"

        '400':
          description: Codigo invalido o expirado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '401':
          description: No autorizado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        '500':
          description: error del sevidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"


  /listings:
    post:
      tags: [Listings]
      summary: crear un nuevo alojamiento
      operationId: createListing
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          schema:
            $ref: "#/components/schemas/CreateListingRequest"
      responses:
        '201':
          description: Alojamiento creado exitosamente
          content:
            schema:
              $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          "401":
            description: No autorizado (JWT inválido o ausente)
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ErrorResponse"
          "403":
            description: No tiene permisos para realizar la accion
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ErrorResponse"
          "500":
            description: error del servidor
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ErrorResponse"

  /listings/{id}:
    put:
      summary: Editar un alojamiento existente
      tags:  [Listings]
      operationId: editListing
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: ID del alojamiento a editar
          schema:
            type: integer
            example: 101
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAlojamientoRequest"
      responses:
        "200":
          description: Alojamiento actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlojamientoResponse"
        "400":
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: No autorizado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: El usuario no es propietario del alojamiento
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Alojamiento no encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Eliminar un alojamiento (soft delete)
      tags: [Listings]
      operationId: deleteListing
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: ID del alojamiento a eliminar
          schema:
            type: integer
            example: 101
      responses:
        "200":
          description: Alojamiento marcado como eliminado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlojamientoResponse"
        "400":
          description: El alojamiento no puede eliminarse (reservas futuras)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: No autorizado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: El usuario no es propietario del alojamiento
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Alojamiento no encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: error interno del servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    get:
      tags: [Listings]
      summary: Obtener los alojamientos -- ver sus detalles
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: ID del alojamiento a eliminar
          schema:
            type: integer
            example: 101
      responses:
        '200':
          description: Se obtiene el alojamiento
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlojamientoResponse"
        '401':
          description: No tiene autorizacion
          content: 
            application/json:
              schema: 
                $ref: "#/components/schemas/ErrorResponse"
        '403':
          description: No permisos para realizar esta opcion
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
                
        '404':
          description: Alojamiento no encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: error interno del servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /listings/search:
    get:
      summary: Buscar alojamientos
      tags: [ Listings ]
      operationId: searchListings
      security:
        - bearerAuth: [ ]
      parameters:
        - name: precio
          in: query
          required: false
          description: precio del alojamiento
          schema:
            type: number
            example: 2000
        - name: ciudad
          in: query
          required: false
          description: Ciudad donde se encuentra el alojamiento
          schema:
            type: string
            example: "Berlin"
        - name: fechaInicio
          in: query
          required: false
          description: Fecha de inicio de la búsqueda (check-in)
          schema:
            type: string
            format: date
            example: "2025-12-15"
        - name: fechaFin
          in: query
          required: false
          description: Fecha de fin de la búsqueda (check-out)
          schema:
            type: string
            format: date
            example: "2025-12-20"
        - name: servicios
          in: query
          required: false
          description: lista de servicios separado por coma (wifi, piscina, parqueadero)
          schema:
            type: array
            items:
              type: string
              example: "wifi"
            style: form
            explode: false
      responses:
        "200":
          description: Resultados de la búsqueda
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    example: 3
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/AlojamientoResponse"
        "400":
          description: Parámetros de búsqueda inválidos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: No se encontraron alojamientos que coincidan con la búsqueda
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
                
                
  /listings/{id}/metrics:
    get:
      summary: obtener metricas de un alojamiento(promedio, numero de reservas)
      tags: [Listings]
      operationId: getAlojamientoMetrics
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: ID del alojamiento
          schema:
            type: integer
            example: 101
        - name: fechaInicio
          in: path
          required: false
          descripcion: fecha de inicio del filtro
          schema:
            type: date
            example: "2026-07-01"
        - name: fechaFin
          in: path
          required: false
          descripcion: fecha de fin del filtro
          schema:
            type: date
            example: "2026-08-01"
      responses:
        '200':
          description: Metricas obtenidas exitosamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listingMetricsResponse"
            

  /reserves:
    post:
      summary: Creacion de una reserva
      tags: [Reservations]
      operationId: MakeReserv
      security:
        - bearerAuth: [ ]
      bodyRequest:
        content:
          schema:
            $ref: "#/components/schemas/MakeReservRequest"
      responses:
        '201':
          description: Reserva hecha exitosamente
          content:
            schema:
              $ref: "#/components/schemas/ReservResponse"
        '400':
          description: validaciones fallidas
          content:
            schema:
              $ref: "#/components/schemas/ErrorResponse"
        '404':
          description: Alojamiento no encontrado
          content:
            schema:
              $ref: "#/components/schemas/ErrorResponse"
        '409':
          description: fechas de reserva no disponibles
          content:
            schema:
              $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: error de servidor
          content:
            schema:
              $ref: "#/components/schemas/ErrorResponse"

    get:
      tags: [ Reservations ]
      summary: Listar reservas del usuario autenticado
      operationId: listUserReservations
      security:
        - bearerAuth: [ ]
      parameters:
        - name: estado
          in: query
          required: false
          description: Filtrar reservas por estado (Pendiente, Confirmada, Cancelada, Completada)
          schema:
            type: string
            enum: [ Pendiente, Confirmada, Cancelada, Completada ]
        - name: fechaInicio
          in: query
          required: false
          description: Filtrar reservas a partir de una fecha de inicio
          schema:
            type: string
            format: date
        - name: fechaFin
          in: query
          required: false
          description: Filtrar reservas hasta una fecha de fin
          schema:
            type: string
            format: date
        - name: page
          in: query
          required: false
          description: Número de página para la paginación (por defecto 1)
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          required: false
          description: Tamaño de página para la paginación (por defecto 10)
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Lista de reservas del usuario
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    example: 25
                  page:
                    type: integer
                    example: 1
                  size:
                    type: integer
                    example: 10
                  reservas:
                    type: array
                    items:
                      $ref: "#/components/schemas/ReservResponse"
        "401":
          description: No autorizado (JWT inválido o ausente)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /reserves/{id}:
    get:
      tags: [ Reservations ]
      summary: Ver detalles de una reserva
      operationId: getReservationById
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la reserva
          schema:
            type: integer
      responses:
        "200":
          description: Detalles de la reserva
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReservResponse"
        "401":
          description: No autorizado (JWT inválido o ausente)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Reserva no encontrada
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      summary: Cancelar una reserva
      tags: [Reservations]
      operationId: cancelReserv
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: ID de la reserva a cancelar
          schema:
            type: string
            example: 2341
      responses:
        '200':
          description: Reserva cancelada de manera exitosa
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        '400':
          description: No se puede cancelar la reserva (El tiempo no es adecuado)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '401':
          description: No se encuentra autorizado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '403':
          description: No tiene permisos para realizar esta acción
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '404':
          description: Reserva no encontrada
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '503':
          description: Servicio no disponible
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"


  /listings/{id}/reservs:
    get:
      summary: Mostras las reservas de los alojamientos
      tags: [Reservations]
      operationId: getReservLisiting
      security:
        -bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 2314
      responses:
        '200':
          description: Reservas de alojamiento mostradas
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlojamientoResponse"
        '400':
          description: Datos invalidos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '404':
          description: No se encuentran reservas
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: error interno del servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"



  /comments/{id}:
    post:
      summary: Crear un nuevo comentario
      tags: [Comments]
      operationId: createComment
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: Id de la reserva que se va a comentar
          schema:
            type: string
            example: 2314
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCommentRequest"
      responses:
        '201':
          description: El comentario fue creado con exito
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentResponse"
        '400':
          description: El comentario no fue creado por falta del mensaje
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '409':
          description: No se pudo crear el comentario
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: No se pudo crear el comentario
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /listings/{id}/comments:
    get:
      summary: Listar comentarios de un alojamiento
      tags: [Comments]
      operationId: listComentsByListing
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 5231
        - name: page
          in: query
          required: false
          description: Número de página para paginación
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          description: Número de resultados por página
          schema:
            type: integer
      responses:
        '200':
          description: Listado mostrado correctamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentResponse"
        '401':
          description: No autorizado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '404':
          description: Recurso no encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
                
                
  /comments/{id}/response:
  post:
    summary: Responder a un comentario con el rol de  anfitrión
    tags: [Comments]
    operationId: replyToComment
    security:
      - bearerAuth: [ ]
    parameters:
      - name: id
        in: path
        required: true
        description: ID del comentario al que se va a responder
        schema:
          type: integer
          example: 789
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ReplyRequest"
    responses:
      '201':
        description: Respuesta registrada exitosamente
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplyResponse"
      '400':
        description: Datos inválidos
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ErrorResponse"
      '401':
        description: No autorizado
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ErrorResponse"
      '403':
        description: El usuario no es anfitrión del alojamiento relacionado
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ErrorResponse"
      '404':
        description: Comentario no encontrado
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ErrorResponse"
      '500':
        description: Error de servidor
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ErrorResponse"

  /listings/{id}/promotion:
    get:
      summary: Listar las promociones
      tags:
        - Promotion
      operationId: listListindByIdPromotion
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 9513
      responses:
        '200':
          description: Promociones enlistadas
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"      
        '404':
          description: No encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Promociones enlistadas
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      summary: Crear una nueva promocion
      tags:
        - Promotion
      operationId: createPromotion
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          requiered: True
          schema:
            type: String
            Example: 4120
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePromotionResponse"
      responses:
        '201':
          description: Promocion creada exitosamente
          content:
            application/json:
              $ref: "#/components/schemas/PromotionResponse"
        '400':
          description: Datos inválidos (fechas o porcentaje incorrecto)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '401':
          description: No autorizado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '403':
          description: No tiene permisos para gestionar este alojamiento
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '404':
          description: Alojamiento no encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"


components:
  schemas:

    CreatePromotionResponse:
      type: object
      properties:
        descuento:
          type: number
          description: Porcentaje de descuento (1-100)
          example: 15
        fechaInicio:
            type: string
            format: date
            example: "2025-12-01"
        fechaFin:
            type: string
            format: date
            example: "2025-12-31"
        required:
          - descuento
          - fechaInicio
          - fechaFin

    PromotionResponse:
      type: object
      properties:
        id:
          type: integer
          example: 55
        alojamientoId:
          type: integer
          example: 101
        descuento:
          type: number
          example: 15
        fechaInicio:
          type: string
          format: date
          example: "2025-12-01"
        fechaFin:
          type: string
          format: date
          example: "2025-12-31"
        estado:
          type: string
          enum: [ Activa, Expirada ]
          example: Activa

    ReplyRequest:
      type: object
      properties:
        respuesta:
          type: string
          maxLength: 500
          example: "Gracias por tu comentario, fue un placer recibirte."
      required:
        - respuesta

    ReplyResponse:
      type: object
      properties:
        id:
          type: integer
          example: 456
        comentarioId:
          type: integer
          example: 789
        anfitrionId:
            type: integer
            example: 22
        respuesta:
            type: string
            example: "Gracias por tu comentario, fue un placer recibirte."
        fechaCreacion:
            type: string
            format: date-time
            example: "2025-09-07T17:30:00Z"

    CreateCommentRequest:
      type: object
      properties:
        calificacion:
          type: integer
          minimum: 1
          maximum: 5
          example: 5
        comentario:
          type: string
          maxLength: 500
          example: "El lugar estaba impecable y el anfitrión fue muy amable."
      required:
        - calificacion

    CommentResponse:
      type: object
      properties:
        id:
          type: integer
          example: 789
        reservaId:
          type: integer
          example: 1234
        usuarioId:
          type: integer
          example: 45
        calificacion:
          type: integer
          example: 5
        comentario:
          type: string
          example: "El lugar estaba impecable y el anfitrión fue muy amable."
        fechaCreacion:
          type: string
          format: date-time
          example: "2025-09-07T15:45:00Z"






    ReservResponse:
      type: object
      properties:
        id:
          type: integer
          example: 101
        alojamientoId:
          type: integer
          example: 123
        usuarioId:
          type: integer
          example: 45
        fechaInicio:
          type: string

          example: "2025-09-10"
        fechaFin:
          type: string

          example: "2025-09-15"
        numeroHuespedes:
          type: integer
          example: 4
        estado:
          type: string
          enum: [ Pendiente, Confirmada, Cancelada, Completada ]
          example: Confirmada
        fechaCreacion:
          type: string
          format: date-time
          example: "2025-09-07T14:23:00Z"
        fechaActualizacion:
          type: string
          format: date-time
          example: "2025-09-07T14:25:00Z"
      required:
        - id
        - alojamientoId
        - usuarioId
        - fechaInicio
        - fechaFin
        - numeroHuespedes
        - estado

    
    MakeReservRequest:
      type: object
      properties:
        fechaIngreso:
          type: date
          example: 2026/06/04
        fechaSalida:
          type: date
          example: 2026/06/07
        cantHuespedes:
          type: number
          example: 2
    
    listingMetricsResponse:
      type: object
      properties:
        reservasTotales:
          type: Integer
          example: 30
        promedioCalificacion:
          type: number
          example: 4.3
      required:
        -reservasTotales
        -promedioCalificacion

    AlojamientoResponse:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        ubicacion:
          type: object
        PriceForNight:
          type: number
        Capacity:
          type: integer
        imagenes:
          type: array
          items:
            type: string
            format: uri
        anfitrionId:
          type: integer
          example: 55
        fechaPublicacion:
          type: string
          format: date-time
          example: "2025-09-07T13:00:00Z"
      required:
        - title
        - ubicacion
        - priceForNight
        - description
        - capacity

    UpdateAlojamientoRequest:
      type: object
      properties:
        title:
          type: string
          example: Pent house
        descition:
          type: string
          example: Las mejores vistas de medellin
        ubicacion:
          type: object
          example: {direccion: calle 14, ciudad: medellin, latitud: 100, longitud: 200}
        priceForNight:
          type: number
          format: float
          example: 200
        Capacity:
          type: integer
          example: 40
        imagenes:
          type: array
          items:
            type: string
            format: uri


    CreateListingRequest:
      type: object
      required:
        -ubicacion
        -price
        -capacity
        -title
        -desciptionListing
        -imagenes

      properties:
        ubicacion:
          type: object
        price:
          type: integer
          description: precio por noche del alojamiento
          example: 20000
        title:
          type: string
          description: Nombre del alojamiento
          example: La finquita
        descriptionListing:
          type: string
          description: descripcion detallada del alojamiento
          example: Alojamiento a los alrededores de la montaña con excelente clima
        capacity:
          type: integer
          description: capacidad maxima del alojamiento
          example: 20
        service:
          type: string
          description: que servicios vienen con el alojamiento
          example: Wifi, cocina, etc
        imagenes:
          type: array
          items:
            type: string
            format: uri
    ChangePasswordRequest:
      type: object
      required:
        - new password
        - codigo
      properties:
        new password:
          type: string
          minLength: 8
          pattern: "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).*$"
          description: La contraseña del usuario (debe contener al menos un dígito, una letra minúscula y una letra mayúscula)
        codigo:
          type: string
          example: 9802


    RecoveryResponse:
      type: object
      required:
          - email
      properties:
        email:
            type: string
            format: email
            example: "carlos.perez@mail.com"

    viewUsers:
      Usuario:
        type: object
        properties:
          id:
            type: integer
            example: 12
          nombre:
            type: string
            example: "Carlos Pérez"
          email:
            type: string
            format: email
            example: "carlos.perez@mail.com"
          telefono:
            type: string
            example: "+57 3123456789"
          rol:
            type: string
            enum: [ usuario, anfitrion ]
            example: "usuario"
          fechaNacimiento:
            type: string
            format: date
            example: "1995-06-20"
          fotoPerfil:
            type: string
            format: uri
            nullable: true
            example: "https://cdn.miapp.com/usuarios/12/perfil.jpg"
          descripcion:
            type: string
            nullable: true
            example: "Anfitrión con experiencia en Medellín."

    UserRegister:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
          pattern: "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).*$"
          description: La contraseña del usuario (debe contener al menos un dígito, una letra minúscula y una letra mayúscula)
        fullName:
          type: string
          maxLength: 100
        dateBirth:
          type: string
          format: date
          example: "1990-01-01"
        role:
          type: string
          enum:
            - user
            - admin
          default: user
      required:
        - fullName
        - email
        - password
    loginRequest:
      type: object
      required: true
        -password
        -email
      properties:
        email:
          type: string
          format: email
          example: "usuario@ejemplo.com"
        password:
          type: string
          format: password
          example: "ContraseñaSegura123"

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT de autenticación
          user:
            type: object
            properties:
              id:
                type: integer
              nombre:
                type: string
              email:
                type: string
                format: email
              rol:
                type: string
                enum: [ usuario, anfitrion]

    UpdateProfileRequest:
      type: object
      properties:
        nombre:
          type: string
          maxLength: 100
        telefono:
          type: string
          pattern: "^[+0-9]{7,15}$"
        fotoPerfil:
          type: string
          format: uri
        descripcion:
          type: string
          maxLength: 500
          description: Solo visible para anfitriones
      description: Campos opcionales para actualizar el perfil

    UpdateProfileResponse:
      type: object
      properties:
        id:
          type: integer
        nombre:
          type: string
        email:
          type: string
          format: email
        telefono:
          type: string
        rol:
          type: string
          enum: [ usuario, anfitrion ]
        fotoPerfil:
          type: string
          format: uri
        descripcion:
          type: string

    updatePassword:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
          description: Contraseña actual del usuario
        newPassword:
          type: string
          minLength: 8
          pattern: "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).*$"
          description: Nueva contraseña del usuario (debe contener al menos un dígito, una letra minúscula y una letra mayúscula)

    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: "Contraseña actualizada exitosamente"
      required:
        - message

    UserResponse:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        fullName:
          type: string
        dateBirth:
          type: string
          format: date
        role:
          type: string
      required:
        - id
        - email
        - fullName
        - role
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
      required:
        - error
        - message
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT



